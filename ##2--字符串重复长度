给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。


编译通过
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
#         a_num=[]
        
#             sum=0
#             a=''
#             if a[i] not in s for int i in range(len(s)):
                
#                 sum++
#                 a.append(s[i+1])
#             elif :
                
#                 a.append(sum)
        rlen=0
        start=0
        trace={}#字典
        for index,value in enumerate(s):
            if value in trace and trace[value]>=start:
                rlen=max(rlen,index-start)
                start=index+1
            trace[value]=index
        return max(rlen,len(s)-start)
        
        
if __name__=='__main__':
    print(Solution().lengthOfLongestSubstring('abcabcbb'))
    # print(Solution().lengthOfLongestSubstring('abba'))
    # print(Solution().lengthOfLongestSubstring('pwwkew'))
    
