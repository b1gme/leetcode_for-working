给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807


编译通过
class ListNode():
    def __init__(self,x):
        self.val=x
        self.next=None
#         定义链表

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        head=ListNode(0)
        p=head
        quot=0
        while l1 or l2 or quot !=0:
            if l1:#判断l1是否为零
                quot+=l1.val
                l1=l1.next#指向下一个l1
            if l2:
                quot+=l2.val
                l2=l2.next
           
            quot,rem=divmod(quot,10)
        
            p.next=ListNode(rem)#p的下一个值
            p=p.next#赋值
            
        return head.next#返回整个链表
        
def comparet(l1,l2):
    while l1 or l2:
        if l1.val!=l2.val or not(l1 and l2):
            return False #The return statement only makes sense inside functions:

        l1=l1.next
        l2=l2.next
    #这个函数是每个节点，节点来比较
    return  True

    
if __name__=='main':
    l1=ListNode(2)
    l1.next=ListNode(4)
    l2.next.next=ListNode(3)
    l2=ListNode(5)
    l2.next=ListNode(6)
    l2.next.next=ListNode(4)
    lsum=ListNode(7)
    lsum.next=ListNode(0)
    lsum.next.next=ListNode(8)
    print(compare(Solution().addTwoNumbers(l1,l2),lsum))#单单一个Solution并不是示例，不可以直接调用
